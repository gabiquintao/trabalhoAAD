// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using trabalhoAAD.Services;

#nullable disable

namespace trabalhoAAD.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241229234044_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Atendente", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdMorada")
                        .HasColumnType("int")
                        .HasColumnName("id_morada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PK__atendent__3213E83FA8A520A8");

                    b.HasIndex("IdMorada");

                    b.ToTable("atendente", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int>("IdAtendente")
                        .HasColumnType("int")
                        .HasColumnName("id_atendente");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("motivo");

                    b.HasKey("Id")
                        .HasName("PK__atendime__3213E83F17D305BE");

                    b.HasIndex("IdAtendente");

                    b.HasIndex("IdCliente");

                    b.ToTable("atendimento", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int>("IdMorada")
                        .HasColumnType("int")
                        .HasColumnName("id_morada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefone");

                    b.Property<bool>("Tipo")
                        .HasColumnType("bit")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PK__cliente__3213E83FC787D08F");

                    b.HasIndex("IdMorada");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdMorada")
                        .HasColumnType("int")
                        .HasColumnName("id_morada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefone");

                    b.HasKey("Id")
                        .HasName("PK__forneced__3213E83FE5C44664");

                    b.HasIndex("IdMorada");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PK__marca__3213E83F2A79F4C7");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdFornecedor")
                        .HasColumnType("int")
                        .HasColumnName("id_fornecedor");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PK__material__3213E83F4C64C0A1");

                    b.HasIndex("IdFornecedor");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Mecanico", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte>("Especialidade")
                        .HasColumnType("tinyint")
                        .HasColumnName("especialidade");

                    b.Property<int>("IdMorada")
                        .HasColumnType("int")
                        .HasColumnName("id_morada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefone");

                    b.HasKey("Id")
                        .HasName("PK__mecanico__3213E83FF83DEFE3");

                    b.HasIndex("IdMorada");

                    b.ToTable("mecanico", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("id_marca");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<byte>("TipoCombustivel")
                        .HasColumnType("tinyint")
                        .HasColumnName("tipo_combustivel");

                    b.HasKey("Id")
                        .HasName("PK__modelo__3213E83F575CF627");

                    b.HasIndex("IdMarca");

                    b.ToTable("modelo", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Morada", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cp1")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("cp1");

                    b.Property<string>("Cp2")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("cp2");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("PK__morada__3213E83FB4A30983");

                    b.ToTable("morada", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Orcamento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdServico")
                        .HasColumnType("int")
                        .HasColumnName("id_servico");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PK__orcament__3213E83FC0BA61E7");

                    b.HasIndex("IdServico");

                    b.ToTable("orcamento", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int>("IdOrcamento")
                        .HasColumnType("int")
                        .HasColumnName("id_orcamento");

                    b.Property<byte>("Metodo")
                        .HasColumnType("tinyint")
                        .HasColumnName("metodo");

                    b.HasKey("Id")
                        .HasName("PK__pagament__3213E83F8AC1A597");

                    b.HasIndex("IdOrcamento");

                    b.ToTable("pagamento", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Relatorio", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int>("IdServico")
                        .HasColumnType("int")
                        .HasColumnName("id_servico");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("texto");

                    b.Property<byte>("Tipo")
                        .HasColumnType("tinyint")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PK__relatori__3213E83F935DEFD9");

                    b.HasIndex("IdServico");

                    b.ToTable("relatorio", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Servico", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DataFim")
                        .HasColumnType("date")
                        .HasColumnName("data_fim");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<int>("IdMecanico")
                        .HasColumnType("int")
                        .HasColumnName("id_mecanico");

                    b.Property<int>("IdVeiculo")
                        .HasColumnType("int")
                        .HasColumnName("id_veiculo");

                    b.Property<byte>("Tipo")
                        .HasColumnType("tinyint")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PK__servico__3213E83F8B436043");

                    b.HasIndex("IdMecanico");

                    b.HasIndex("IdVeiculo");

                    b.ToTable("servico", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.ServicoMaterial", b =>
                {
                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdServico")
                        .HasColumnType("int")
                        .HasColumnName("id_servico");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.HasIndex("IdMaterial");

                    b.HasIndex("IdServico");

                    b.ToTable("servico_material", (string)null);
                });

            modelBuilder.Entity("trabalhoAAD.Models.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<short>("Ano")
                        .HasColumnType("smallint")
                        .HasColumnName("ano");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int>("IdModelo")
                        .HasColumnType("int")
                        .HasColumnName("id_modelo");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("matricula");

                    b.Property<byte>("Mes")
                        .HasColumnType("tinyint")
                        .HasColumnName("mes");

                    b.HasKey("Id")
                        .HasName("PK__veiculo__3213E83F2041EC44");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdModelo");

                    b.ToTable("veiculo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("trabalhoAAD.Models.Atendente", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Morada", "IdMoradaNavigation")
                        .WithMany("Atendentes")
                        .HasForeignKey("IdMorada")
                        .IsRequired()
                        .HasConstraintName("FK_Atendente_Morada");

                    b.Navigation("IdMoradaNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Atendimento", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Atendente", "IdAtendenteNavigation")
                        .WithMany("Atendimentos")
                        .HasForeignKey("IdAtendente")
                        .IsRequired()
                        .HasConstraintName("FK_Atendimento_Atendente");

                    b.HasOne("trabalhoAAD.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Atendimentos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Atendimento_Cliente");

                    b.Navigation("IdAtendenteNavigation");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Cliente", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Morada", "IdMoradaNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdMorada")
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Morada");

                    b.Navigation("IdMoradaNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Fornecedor", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Morada", "IdMoradaNavigation")
                        .WithMany("Fornecedors")
                        .HasForeignKey("IdMorada")
                        .IsRequired()
                        .HasConstraintName("FK_Fornecedor_Morada");

                    b.Navigation("IdMoradaNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Material", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Fornecedor", "IdFornecedorNavigation")
                        .WithMany("Materials")
                        .HasForeignKey("IdFornecedor")
                        .IsRequired()
                        .HasConstraintName("FK_Material_Fornecedor");

                    b.Navigation("IdFornecedorNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Mecanico", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Morada", "IdMoradaNavigation")
                        .WithMany("Mecanicos")
                        .HasForeignKey("IdMorada")
                        .IsRequired()
                        .HasConstraintName("FK_Mecanico_Morada");

                    b.Navigation("IdMoradaNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Modelo", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Marca", "IdMarcaNavigation")
                        .WithMany("Modelos")
                        .HasForeignKey("IdMarca")
                        .IsRequired()
                        .HasConstraintName("FK_Modelo_Marca");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Orcamento", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Servico", "IdServicoNavigation")
                        .WithMany("Orcamentos")
                        .HasForeignKey("IdServico")
                        .IsRequired()
                        .HasConstraintName("FK_Orcamento_Servico");

                    b.Navigation("IdServicoNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Pagamento", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Orcamento", "IdOrcamentoNavigation")
                        .WithMany("Pagamentos")
                        .HasForeignKey("IdOrcamento")
                        .IsRequired()
                        .HasConstraintName("FK_Pagamento_Orcamento");

                    b.Navigation("IdOrcamentoNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Relatorio", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Servico", "IdServicoNavigation")
                        .WithMany("Relatorios")
                        .HasForeignKey("IdServico")
                        .IsRequired()
                        .HasConstraintName("FK_Relatorio_Servico");

                    b.Navigation("IdServicoNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Servico", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Mecanico", "IdMecanicoNavigation")
                        .WithMany("Servicos")
                        .HasForeignKey("IdMecanico")
                        .IsRequired()
                        .HasConstraintName("FK_Servico_Mecanico");

                    b.HasOne("trabalhoAAD.Models.Veiculo", "IdVeiculoNavigation")
                        .WithMany("Servicos")
                        .HasForeignKey("IdVeiculo")
                        .IsRequired()
                        .HasConstraintName("FK_Servico_Veiculo");

                    b.Navigation("IdMecanicoNavigation");

                    b.Navigation("IdVeiculoNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.ServicoMaterial", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Material", "IdMaterialNavigation")
                        .WithMany()
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("FK_ServicoMaterial_Material");

                    b.HasOne("trabalhoAAD.Models.Servico", "IdServicoNavigation")
                        .WithMany()
                        .HasForeignKey("IdServico")
                        .IsRequired()
                        .HasConstraintName("FK_ServicoMaterial_Servico");

                    b.Navigation("IdMaterialNavigation");

                    b.Navigation("IdServicoNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Veiculo", b =>
                {
                    b.HasOne("trabalhoAAD.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Veiculos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Veiculo_Cliente");

                    b.HasOne("trabalhoAAD.Models.Modelo", "IdModeloNavigation")
                        .WithMany("Veiculos")
                        .HasForeignKey("IdModelo")
                        .IsRequired()
                        .HasConstraintName("FK_Veiculo_Modelo");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdModeloNavigation");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Atendente", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Cliente", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Fornecedor", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Mecanico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Modelo", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Morada", b =>
                {
                    b.Navigation("Atendentes");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedors");

                    b.Navigation("Mecanicos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Orcamento", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Servico", b =>
                {
                    b.Navigation("Orcamentos");

                    b.Navigation("Relatorios");
                });

            modelBuilder.Entity("trabalhoAAD.Models.Veiculo", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
